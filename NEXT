
Lesson.18
=========
[...] slowest implementation of find_words, based on array. prepare a demo
        Array#intersect
        sentence_words.each {|w| queries.include?(w)}
        queries.each {|w| sentence_words.include?(w)}
[...] continue with find_words

- algorithm on how to search using hash
- compare how searching using hash works in comparison with searching in array
  - use the same text
  - use larger wordlist, e.g. all words from the text
- show different possibilities of loading words from the external wordlist into a Hash
   using map
   using each
   using Hash[]
- algorithm of generating phrases from a sentence
- operations on sets: intersection, union, subtraction (complement, difference)
   task: develop a methods that a.intersect(b) => common, uniq_in_a, uniq_in_b
   task: respect number of occurrences when subtracting
	a = [1,2,3,4,1,2,3]
	b = [2,3,4]
	NOW: a - b => [1, 1] 
	SHOULD BE: a - b => [1,1,2,3]


for code review #3 (lessons 13+)
================================
TODO: develop testcases for Syn module and handle them out as a supplement to code review 3

1) maxfreqtag
2) your own Syn module (syn.rb) that should implement the following methods
	tags   -- given a tagged string, returns all tags as an array
	words  -- given a tagged string, returns all words as an array
	untag  -- given a tagged word/sentence/relation, returns untagged word/sentence/relation as a string.
	unword -- given a tagged word/sentence, returns tag(s) as a string
	unwdc  -- given a tagged sentence/relation, collapse compound words (see slide 127 for details)
 * Hint: A relation can be distinguished from non-relations by presence of at least one \t character. The first field in the relation is always a relation name. 

3) insert_sort_to_new
4) insert_sort_in_place
5) find_all_anagrams
6) find_words
7) assign_properties

темы, которые надо рассмотреть
==============================
IO.popen

