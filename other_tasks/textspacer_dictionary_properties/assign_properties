#!/usr/bin/env ruby
# -*- coding: utf-8; -*-

# # #
# TODO: when run for the train corpus, should the actual tokenization be used only
# or the whole dictionary?

Encoding::default_external = 'UTF-8'

require 'ru_utf8'
require 'optparse'


def validate_file_exists path
  unless File.exists?(path)
    raise "File not found: #{path}"
  end
  path
end

@dict_props = {
  'd_si' => 'the character starts a substring that is a dictionary word',
  'd_sm' => 'the character occurs in the middle of a dictionary word', 
  'd_sl' => 'the character ends a substring that is a dictionary word',
  'd_sw' => 'the character is a separate dictionary word'
}


@options = {
  verbose: true,
  adjust_for_punctuation: true
}

OptionParser.new do |opts|
  opts.banner = "
  Assign properties
1. dictionary properties: #{@dict_props.keys.join(', ')}
USAGE: #{File.basename($0)} [OPTIONS] ...
OPTIONS:
"

  @options[:dict_file] = nil
  opts.on('--dict=FILE', 'path to dictionary file') do |val|
    @options[:dict_file] = validate_file_exists(val)
  end

  @options[:use_gold_tags] = false
  opts.on('--gold-corpus',
          'tells that the file(s) being processed has/have gold tags',
          'and that the gold tags should be used instead of the dictionary',
          'for setting dictionary properties.') do
    @options[:use_gold_tags] = true
  end

  opts.separator "FORMAT OF DICTIONARY FILE"
  opts.separator "One word per line, in the correct letter case."
  opts.separator "Any number of fields are allowed on a single line, the 1st one is assumed"
  opts.separator "to be the word itself."
  opts.separator " "
end.parse!

#puts @options.inspect

if !@options[:use_gold_tags] && !@options[:dict_file]
  $stderr.puts "ERROR: you should use either --gold-corpus or --dict=FILE options"
  exit 1
end

def verboser msg
  if @options[:verbose]
    $stderr.puts msg
  end
end

######################################################################
# DICTIONARY

if @options[:dict_file]
  verboser "Loading the dictionary from #{@options[:dict_file]}..."
  @dict = {}
  f = File.new(@options[:dict_file])
  f.each do |line|
    line.chomp!
    if line.empty? || line =~ /^#/
      # skip
    else
      @dict[line.split.first] = nil
    end
  end
  f.close
  verboser "Words in dictionary: #{@dict.length}"
end

## fake dictionary
# @dict = {
#   'невозможность' => nil,
#   'возможность' => nil,
#   'невозможно' => nil,
#   'возможно' => nil,
#   'можно' => nil,
#   'воз' => nil,
#   'нос' => nil,
#   'не' => nil,
#   'но' => nil,
#   'в' => nil
# }
#
# addon = %w{как успокоить младенца часть фото часто причины детского плача так и остаются загадкой
# кроха может просто реагировать на изменившуюся погоду все груднички метеозависимы
# или волноваться в период полнолуния при
# китай требует дешевых лекарств
# китайские власти стали признавать важность информирования населения о безопасном сексе
# две китайские фармацевтические компании подали заявки на производство дешевых версий лекарств против спида}
#
# addon.each {|w| @dict[w] = nil}

def in_dict? word
  @dict.include?(word)
end

def dict_word_max_length
  @longest_word_length ||= @dict.keys.max{ |a,b| a.length <=> b.length }.length
end

######################################################################
# DICTIONARY INFO

def reset_dict_info
  @dict_info ||= []
  @dict_info.clear
end

def add_dict_info pos, info
#  puts "Adding #{info} to #{pos}"
  @dict_info[pos] ||= []
  @dict_info[pos] << info
end

def set_dict_info pos, info
  if info
#    puts "Adding #{info} at pos=#{pos}"
    @dict_info[pos].clear
    @dict_info[pos] << info
  end
end

def show_dict_info chars
  @dict_info.each_with_index do |data, idx|
    puts "##{idx}\t#{chars[idx]}\t#{data.inspect}"
  end
end

######################################################################

# computes correct property from precomputed dictionary info
def get_dictionary_properties(pos)
  props = []
  if @dict_info[pos]
    @dict_props.keys.each do |prop|
      count = @dict_info[pos].count(prop)
      if count > 0
        props << prop + count.to_s
      else
        props << 'd_'
      end
    end
  else
    props = ['d_'] * @dict_props.length
  end
  props
end

######################################################################
# subtasks:
# 1. be able to find all possible substrings of a string starting from
#    the given position.
#    1a) Do not generate repetitions that come from hitting out-of-range characters
#FOUND: [2,11]'возможность' is known to the dictionary
#FOUND: [2,12]'возможность' is known to the dictionary
#FOUND: [2,13]'возможность' is known to the dictionary
#FOUND: [2,14]'возможность' is known to the dictionary
#FOUND: [2,15]'возможность' is known to the dictionary


def find_dictionary_words_at_pos(chars, start_pos)
  max_iterations = [chars.length-start_pos, dict_word_max_length].min # 1a

  max_iterations.times do |offset|
    end_pos = start_pos+offset
    subword = chars[start_pos..end_pos].join('')
#    puts "subword: #{subword}"

    if in_dict?(subword)
#      puts "FOUND: [#{start_pos}..#{end_pos}]='#{subword}' is known to the dictionary"
      if subword.length == 1
        add_dict_info(start_pos, 'd_sw')
      else
        add_dict_info(start_pos, 'd_si')
        add_dict_info(end_pos, 'd_sl')
        (start_pos+1).upto(end_pos-1) do |pos|
          add_dict_info(pos, 'd_sm')
        end
      end
    end
  end
end

def find_dictionary_words chars
  reset_dict_info
  chars.each_index do |pos|
    find_dictionary_words_at_pos(chars, pos)
  end
end

if false
  chars = 'невозможность'.split('')
  puts chars.inspect

  find_dictionary_words(chars)

  #find_dictionary_words_at_pos(chars, 0)
  #din_dictionary_words_at_pos(chars, 2)
  #puts @dict_info.inspect

  #puts get_dictionary_properties(0).inspect
  #puts get_dictionary_properties(2).inspect

  show_dict_info(chars)

  exit 100
end

def get_tag_from_dict_info(pos)
  if @dict_info[pos]
    props = @dict_info[pos].compact
    if props.length == 1
      dict_prop2tag(props.first)
    else
      raise "Multiple properties are present, can not produce a single tag"
    end
  end
end

# NOTE:
# in a sequence of PMs, the non-last ones will be assigned incorrect property
# if only the original tag of the previous character is considered
# set_dict_info(pos-1, tag2dict_prop(move_left(prev_tag))) 

def set_dictionary_info_from_tags(chars_tags)
  reset_dict_info

  prev_tag = nil
  move_right_next_tag = false
  chars_tags.each_with_index do |(char, tag), pos| # TODO: explain this trick with ( )
#    puts "#{pos}-#{char}-#{tag}"

    if @options[:adjust_for_punctuation] && char =~ /^[[:punct:]]+$/
      # update the dictionary property of previous character
      prev_tag = get_tag_from_dict_info(pos-1)
      set_dict_info(pos-1, tag2dict_prop(move_left(prev_tag)))

      # remember to shift the property of the subsequent character
      move_right_next_tag = true

      # deem the punctuation mark always a standalone word
      prop = tag2dict_prop('SW')

    else
      if move_right_next_tag
        tag = move_right(tag)
        move_right_next_tag = false
      end
      prop = tag2dict_prop(tag)
    end

    add_dict_info(pos, prop)
  end

#  puts @dict_info.inspect
end

def tag2dict_prop tag
  # we are lucky to have dictionary properties in correlation with tags
  # SI -> d_si, SL -> d_sl...
  if tag
    'd_' + tag.downcase
  end
end

# d_si -> SI, d_sw -> SW
def dict_prop2tag prop
  if prop
    prop.sub(/^d_/, '').upcase
  end
end

def move_left tag
  case tag
  when 'SM'
    'SL'
  when 'SI'
    'SW'
  else
    # SL and SW are not expected
    tag
  end
end

def move_right tag
  case tag
  when 'SL'
    'SW'
  when 'SM'
    'SI'
  else
    tag
  end
end

######################################################################

def extract_chars lines
  chars = lines.map do |line|
    unless line.empty? || line =~ /^#!#/
      line.split(/\t/).first.downcase
    end
  end.compact
  chars
end

def extract_chars_and_tags(lines)
  chars = lines.map do |line|
    unless line.empty? || line =~ /^#!#/
      fields = line.split(/\t/)
      [fields.first.downcase, fields.last]
    end
  end.compact
  chars
end

######################################################################

while block = gets("")

  lines = block.split(/\n/)

  if @options[:use_gold_tags]
    chars_tags = extract_chars_and_tags(lines)
    #puts chars_tags.inspect

    set_dictionary_info_from_tags(chars_tags)
    #show_dict_info(chars_tags)
    #exit 100

  else
    # extract individual characters
    chars = extract_chars(lines)
    #puts chars.inspect

    # index the characters with respect to their availability/position
    # in the known dictionary
    find_dictionary_words(chars)
    #show_dict_info(chars)
  end

  pos = -1
  lines.each_with_index do |line, i|
    line.chomp!

    if line.empty? || line =~ /^#!#/
      next
    end

    pos += 1 # corresponds to the numbering of characters in chars
    char, *properties, tag = line.split(/\t/)

    # mark characters that start/end dictionary words
    properties += get_dictionary_properties(pos)

    # insert properties back into line
    lines[i] = [char, properties, tag].flatten.join("\t")
  end

  puts lines.join("\n")
  puts "\n"
end

