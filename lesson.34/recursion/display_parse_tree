#!/usr/bin/env ruby

# # #
# USAGE: display_parse_tree
# or
# USAGE: display_parse_tree sent.en.parsed
# the result is expected to be similar to sent.en.parsed.tree
#

# ex: Wessen gedenkt man am 25. August ?
parsing1 = \
   ["w_complete_sentence",
       ["w_cl_fin",
		   ["w_ng_d",
              ["Wessen_PISG_0"],
		    "w_cl_fin",
              ["gedenkt_VLPI3S_1",
		       "w_ng_io_n", 
			      ["w_ng_n",
                     ["man_PSSN_2"],
				   "w_ng_io", 
                     ["w_ap_ng",
                        ["am_APPD_3",
                         "w_ncmsd",
                           ["25._ZO_4", "August_NCMSD_5" ]]]]]],
	   "?_?_6"]]

# ex: I love apples and pears that my grandparents grow in their garden
parsing2 = \
   ["w__Sentence",
      ["I_PP1A",
       "w__VB_XX",
          ["love_VB",
           "w_NNS_HP_CC",
             ["apples_NNS",
              "and_CC",
              "pears_NNS"]]],
    "that_CS",
    "w__Sentence",
       ["w_NNS",
           ["my_PP$",
            "grandparents_NNS"],
        "w__VB_XX",
           ["grow_VB",
            "w__IN_N",
               ["in_IN",
                "w_NN",
                   ["their_PP$",
                    "garden_NN"]]]]]


def parse_bracketed_ps tokens
  tokens = tokens.split  if tokens.is_a? String
#  puts tokens.inspect

  children = []

  while !tokens.empty?
    current = tokens.shift

    case current
    when '(('
      # subtree begins (children of the most recently processed entity)
      children << parse_bracketed_ps(tokens)

    when '))'
      # done parsing current subtree
      break

    else
      # entity: either word or node name
      children << current
    end
  end

  children
end

def indent n
  " " * n * 3
end

def show_parsing nodes, level=-1
  tree = ""
  level += 1
  nodes.each do |node|
    if node.is_a? Array
      tree << show_parsing(node, level)
    else
      tree << "\n" + indent(level) + node
    end
  end
  tree
end

[parsing1, parsing2].each do |parsing|
  puts show_parsing parsing
end

if ARGV.empty?
  puts "\n" + '*' * 20
  puts "To run the 2nd part, give an input file (sent.parsed) to the script"
  exit 
else
  puts "\n### The second part ###"
end

while line = gets
  line.chomp!

  parsing = parse_bracketed_ps line
#  puts parsing.inspect

  puts show_parsing parsing
end
