#!/usr/bin/env ruby

# # #
#
#

require 'optparse'

OptionParser.new do |opts|
  opts.banner = "
  Convert the text to the format valid for feeding the text to CRF utils.
USAGE: #{File.basename($0)} [OPTIONS] text_file(s)
OPTIONS:
"

  opts.on('--help', 'display this message and exit') do
    puts opts.to_s
    exit 0
  end

  @add_tags = false

  @label_empty_lines = false
  opts.on('--label-empty-lines',
          'output empty lines prepending #!#EMPTYLINE',
          'to them. Can later be used with --skip-line= option') do
    @label_empty_lines = false
  end

  opts.separator " "

end.parse!

def pick_tag prev_char, next_char
  if prev_char == ' ' && next_char == ' '
    'SW'  # a complete word
  elsif prev_char == ' '
    'SI'  # word initial character
  elsif next_char == ' '
    'SL'  # word last character
  else
    'SM'  # word middle character
  end
end

# Given an array of characters, add a tag to each character.
# This method modifies the given array in place.
#
# ex: A bat is flying
#  before     after
# -------------------
#   "A"      "A\tSW"    # a preceeding space is assumed
#   " "      " "        # you can delete the space if you want
#   "b"      "b\tSI"
#   "a"      "a\tSM"
#   "t"      "t\tSF"
#   " "      " "        # you can delete the space if you want
#   "i"      "i\tSI"
#   "s"      "s\tSF"
#   " "      " "        # you can delete the space if you want
#   "f"      "f\tSI"
#   "l"      "l\tSM"
#   "y"      "y\tSM"
#   "i"      "i\tSM"
#   "n"      "n\tSM"
#   "g"      "g\tSL"    # subsequent space is assumed

def add_tags chars
  # TODO: write your code here
end

while line = gets
  line.chomp!

  if line.empty?

    if @label_empty_lines
      puts "#!#EMPTYLINE"
    end

  else
    chars = line.squeeze(' ').split_me_somehow

    if @add_tags
      # TODO: add your code here
    else
      # still need to append a tab before the missing TAG
      chars.map! {|ch| ch + "\t"}
    end

    puts chars.join("\n")
    puts ""
  end
end
