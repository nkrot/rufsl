Задание
========

(find_predicates)

Найти последовательности слов, возможно соответствующих сложным/составным предикатам, и вывести каждую такую последовательность и предложение, в котором она была найдена. Если в предложении есть несколько таких последовательностей, то найти и вывести надо все:

	> find_predicate test.in > test.out

Последовательности должны состоять из более чем одного слова и включать вспомогательный глыгол/ы, смысловой глагол и опционально наречия/отрицание *внутри* предиката. Если хотите, так же и запятые. Например

	could have decided to finally stop smoking

Извлекать простое сказуемое с наречиями не надо.

Вспомогательные ресурсы:
------------------------
1. adverbs.wl -- список наречий. Дополнительно необходимо обработать наречия на -ly (регулярным выражением).
2. verbs.aux.wl -- список вспомогательных глаголов
3. verbs.lex.wl -- смысловые глаголы, в разных формах. Кроме того, формы VBG можно метчить при помощи РВ.

Дополнительные аспекты
-----------------------
В отличие от задачи find_words, в этой задаче искать отдельные слова нужно при помощи РВ, которое нужно построить из слов, заруженных из внешних вспомогательных ресурсов. Метчить РВ нужно без учета регистра.

Обязательно использовать Regexp.escape. Можно использовать Regexp.union(array). РВ для наречий может иметь одну из следующих форм:

	/\b(not|n't|ever|never)\b/
	/(\bnot\b|\bn't\b|\bever\b|\bnever\b)/

Имеет смысл создать отдельный метод, который будет загружать файл и строить РВ из найденных в нем слов. Имена файлов можно захаркодить.

Примерный алгоритм поиска:
1. найти все метчи всех регулярных выражений в текущей строке --> массив MatchData

	[md0, md1, md2, md3...]

2. сгруппировать те MatchData, которые метчат *последовательный* фрагмент текста. --> Каждая группа это отдельный массив.

	[[md0], [md1, md2, md3]...]

3. группы, в которых более одного элемента, могут содержать искомый сложный/составной предикат. Необходимо в этом убедиться и вывести, если проверка успешна. Формат вывода:

	предикат \tab предложение

Запуск
------
На вход необходимо подавать токенизированный текст, как в data/corpus.tok.txt или в test.in

	> find_predicate test.in  # ожидаемый выход в test.out
	
начальный скрипт: find_predicate_stub
ответ: find_predicate

