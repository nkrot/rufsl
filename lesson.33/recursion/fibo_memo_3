#!/usr/bin/env ruby

@debug = !!ARGV.delete('--debug')
@call_inner = !!ARGV.delete('--call-inner')

# return the nth number of the fibonacci series (starting from 0)
def fibo_nth(n)

  def fibo_nth_ll(n)
    @fibo_numbers[n] ||= fibo_nth_ll(n-2) + fibo_nth_ll(n-1)
  end

  @fibo_numbers = {0 => 0, 1 => 1} # init_memory

  fibo_nth_ll(n)
end

# first 21 Fibonacci numbers
gold = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765]

unless @debug
  puts fibo_nth(2)  == gold[2]
  puts fibo_nth(3)  == gold[3]
  puts fibo_nth(4)  == gold[4]
  puts fibo_nth(5)  == gold[5]
end

puts fibo_nth(20) == gold[20]
puts "Yes, fibonacci's 20th number equals #{gold[20]}"

if @call_inner
  puts "\nWill attempt to call the method defined within another method"
  puts "Ideally, this should fail, because inner method should remain private, but ruby sucks :("
  @fibo_numbers = {0 => 0, 1 => 1} # clear the memory explicitly

  puts "Compute the fibonacci 20th number, should be equal to #{gold[20]}"
  puts fibo_nth_ll(20) #== gold[20]
end
