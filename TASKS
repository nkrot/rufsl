Focus: Arrays
=============

сортировать релейшны (rVP --numbered) по самому левому слову или по размаху (разница между положением самого левого слова в предложении и положением самого правого слова в предложении). на вход идет выход EXTester2 c --tagged-sentence --tagged-relations --numbered-relations

custom implementations of Array methods
	sort
	reverse
	shuffle
	uniq/uniq!

other_tasks/arrays.rbta

tasks involving sort: similar to what I do for ranking cmp difference.
assume this is cmp tagging. build indices
- Hash. change => [entry1, entry2, ...]. I will have to implement this logic myself.
- [[change1, quantity1], [change2, quantity2], [change3, quantity3]]

Focus: Hashes
=============

1. given a text, find the most frequent word that comes after the article 'the'
requires: a hash [word] = count

2. given a text, find 10 most frequent words that come after the articles 'a' 'an' 'the'
requires: multidimensional hash: counts['a'][word1] = count

3. given a list of word translations, join the lines so that all translations appear on the same line
    in:
	one	ein
	one	uno
	two	zwei
	two	dos
    out:
	one	ein	uno
	two	zwei	dos

4. collect words with all case variants occurring in a text corpus.

5. collect words and all its variants with diacritics. compute the probability of each diacritical spelling
	!!! corpus of french texts !!!

6. scrabble game

Focus: Logical expressions
==========================

1. From a tokenized corpus (one sentence per line) extract sentences with specified length:
   a) length less than N tokens
   b) length within specified range. USE: Range#include? or complex conditions

Focus: User defined functions
=============================

1. recursion: compute how much money will be on a bank account with given interests (n %) after specified time lapse (K days) provided that capitalization occurs every day. Perhaps we will need Time or Date classes to compute the exact quantity of days between two dates.

Focus: Unclassified
===================

1. Building a corpus:

!!! добавить способ сгенерировать последовательность случайных чисел, как альтернатива к lesson.10/subcorpus/extract_random_corpus.rb

2. Given a tagged sentence, extract all tag-tag bigrams and trigrams

3. Task using radix sort (radix sort studied in lesson 21)
   sort relations by verious fields: first by action, then by object, then by indirect object (like you would do for PPA). see other_tasks/sort_relations


Ruby quiz
==========

154 - Making change

Projects:
---------

something similar to cmpsao_intersect:
	given a file with tested difference, import it in another untested file
	to imitate testing


ruby quick reference:
http://www.zenspider.com/Languages/Ruby/QuickRef.html#general-tips
other learning resource:
http://rubylearning.com/satishtalim/ruby_exceptions.html

Arrays:
http://www.tutorialspoint.com/ruby/ruby_arrays.htm

C++ http://www.sparknotes.com/cs/
	examples of trees, sorting

ruby for newbies:
http://net.tutsplus.com/sessions/ruby-for-newbies/

interesting post
http://stackoverflow.com/questions/1614147/odd-or-even-entries-in-a-ruby-array

diagram of ruby core object
http://jeromedalbert.com/a-diagram-of-the-ruby-core-object-model/
https://lh4.googleusercontent.com/e_Eml6aYg1udItOLjQCzUKF1L2K1JcjyZTnzYwcP7A=w1530-h800-no

code kata: http://codekata.pragprog.com/2007/01/kata_eight_conf.html

Statistics
===========

тема: mean, median, mode; range, variance, standard deviation

1. объяснить понятия на примерах к графиками, можно взять те примеры, что в книжке head first statistics. они простые и наглядные.

2. написать свои методы, которые, получив на вход массив значений, вычисляют mean, median, mode. возможно также сделать, чтобы методы принимали на вход хэш, который соответствует табличному представлению данных:

Value            | x1 | x2 | ... | xn
---------------------|------|------|------|-----
Frequency   | f1  | f3 | ...  | fn

hash = {
   x1 => f1,
   x2 => f2,
   ...
   xn => f4
}

3. Самостоятельные задания

mean - найти среднюю длину именной группы r__SNP (в словах) в разных языках.
median  (срединное значение) - медиану для длин r__SNP (в словах) в разных языках.
mode (самое частотное значение) - самый частотный тег? самая частотная длина  rSNP в словах.

4. можно реализовать precision/recall/accuracy в виде своих методов. и потом вынести их в модуль. тут можно показать TDD

Задача cmpsao_group_by_changes_in_dict
=================
- дана разница по SAO, вызванная словарем, нужно ее как-то сгруппировать
- даны также два файла со старым словарем и новым (в формате DicTester --all --brief)
  в жизни разницу по словарь придется делать иначе: сравнивать теги слов из Sentence original в старом и новом словарях

Задачи
======
- lang detect - use probabilities
- similarity (динамическое программирование)
- document similarity

Heapsort
========
+ реализация other_tasks/heapsort/heapsort_to_new
! дополнительное задание для самостоятельной работы: сделать in-place. объяснить как оно должно работать. TODO: предоставить готовую реализацию
- другая реализация build_heap делается через процедуру heap-insert (добавить элемент в конец и дать ему всплыть)
- на кучах строятся очереди с приоритетами (priority queue). применить ее для КАКОЙ задачи? 
- разобраться как делать бенчмарк в руби и продемонстрировать, насколько дорога операция вставки в массив
  a=[]; 10000.times {|i| a.insert(0,i)} # работает долго
  a=[]; 10000.times {|i| a << i}        # работает быстро
 
