#!/usr/bin/env ruby

# # #
# Radix sort for strings
#

# TODO: you have to implement this function
# you may want to add a few testcases to test your implementation
def char_at_pos str, pos
  ""
end


def longest_length(strings)
  strings.map {|n| n.length }.max || 0
end

def radix_sort items
  buckets = []

  longest = longest_length(items)
  1.upto(longest) do |pos|
    # TODO: your code goes here
  end

  #puts "Sorted: #{items.inspect}"
  items
end

######################################################################
# testcases

strings = ["ramp", "lamp", "camp"]
puts strings.sort == radix_sort(strings)

exit 100 # TODO: comment out once you are done with the above case

strings = ["apples", "apple pie", "ramp", "lamp", "camping", "apple"]
puts strings.sort == radix_sort(strings)

strings = [" lamps", "lamp", "  lamp", " lamps "]
puts strings.sort == radix_sort(strings)

strings = []
puts strings.sort == radix_sort(strings)

strings = ["one"]
puts strings.sort == radix_sort(strings)

strings = ["ac", "a", "c", "aa", "bbb", "b"]
puts strings.sort == radix_sort(strings)

# if already sorted
strings = ["a", "aa", "ac", "b", "bbb", "c"]
puts strings.sort == radix_sort(strings)

# the worst case: sorted in reverse order
strings = ["a", "aa", "ac", "b", "bbb", "c"].sort.reverse
puts strings.sort == radix_sort(strings)

# lengths of strings are not contiguous: 1,[2],3,[4],5
strings = ["b","a",  "aab", "aaa", "aaaaa","aaaab","aaaba"]
puts strings.sort == radix_sort(strings)
