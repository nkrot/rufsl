#!/usr/bin/env ruby

# # #
#
#

require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "
  Find words/phrases from words_to_search in given text_files
USAGE: #{File.basename($0)} [OPTIONS] words_to_search text_file(s)
OPTIONS:
"
  opts.on('-h', '--help', 'display this message and exit') do
    puts opts
    exit 0
  end

  options[:ignorecase] = false
  opts.on('-i', '--ignore-case', 'search case insensitively') do
    options[:ignorecase] = true
  end

  options[:output_totals] = false
  opts.on('-t', '--output-totals', 'output the number of finds of each query word (to stderr)') do
    options[:output_totals] = true
  end

  opts.separator " "

end.parse!

######################################################################

Encoding::default_external = 'Windows-1252'

lines = File.readlines(ARGV.shift)

lines.map!{ |line| 
  line.chomp
}.select!{ |line| 
  ! line.empty?
}

# all possible lengths of phrases
lengths = lines.map {|l| l.split.length }.uniq

if options[:ignorecase]
  lines.map!{ |line| line.upcase }
end

queries = Hash[lines.map {|l| [l, 0]}]
# OR
#queries = {}
#lines.each {|l| queries[l] = 0 }

# selftests
#puts queries.include?("word") == true
#puts queries.include?("a phrase") == true

######################################################################

while line = gets
  line.chomp!

  words = line.split

  lengths.each do |phrlen|
    0.upto(words.length-phrlen) do |pos|
      phr = words[pos, phrlen].join(' ')
      phr = phr.upcase  if options[:ignorecase]

#      puts "#{phr.inspect} in #{queries.inspect}"

      if queries.key?(phr)
        puts "%s\t%s\t%s" % [phr, pos, line]
        queries[phr] += 1
      end
    end
  end
end

if options[:output_totals]
  queries.sort_by { |query, count|
    - count
  }.each { |query, count|
    $stderr.puts "#{query}\t#{count}"
  }
end

